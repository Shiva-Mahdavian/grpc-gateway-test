// Code generated by MockGen. DO NOT EDIT.
// Source: sum.pb.go

// Package mock_sum is a generated GoMock package.
package mock_sum

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sum "github.com/mahshiv/grpc-gateway-test"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSumComputerClient is a mock of SumComputerClient interface
type MockSumComputerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSumComputerClientMockRecorder
}

// MockSumComputerClientMockRecorder is the mock recorder for MockSumComputerClient
type MockSumComputerClientMockRecorder struct {
	mock *MockSumComputerClient
}

// NewMockSumComputerClient creates a new mock instance
func NewMockSumComputerClient(ctrl *gomock.Controller) *MockSumComputerClient {
	mock := &MockSumComputerClient{ctrl: ctrl}
	mock.recorder = &MockSumComputerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSumComputerClient) EXPECT() *MockSumComputerClientMockRecorder {
	return m.recorder
}

// ComputeSum mocks base method
func (m *MockSumComputerClient) ComputeSum(ctx context.Context, in *sum.SumRequest, opts ...grpc.CallOption) (*sum.ResultReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ComputeSum", varargs...)
	ret0, _ := ret[0].(*sum.ResultReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeSum indicates an expected call of ComputeSum
func (mr *MockSumComputerClientMockRecorder) ComputeSum(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeSum", reflect.TypeOf((*MockSumComputerClient)(nil).ComputeSum), varargs...)
}

// MockSumComputerServer is a mock of SumComputerServer interface
type MockSumComputerServer struct {
	ctrl     *gomock.Controller
	recorder *MockSumComputerServerMockRecorder
}

// MockSumComputerServerMockRecorder is the mock recorder for MockSumComputerServer
type MockSumComputerServerMockRecorder struct {
	mock *MockSumComputerServer
}

// NewMockSumComputerServer creates a new mock instance
func NewMockSumComputerServer(ctrl *gomock.Controller) *MockSumComputerServer {
	mock := &MockSumComputerServer{ctrl: ctrl}
	mock.recorder = &MockSumComputerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSumComputerServer) EXPECT() *MockSumComputerServerMockRecorder {
	return m.recorder
}

// ComputeSum mocks base method
func (m *MockSumComputerServer) ComputeSum(arg0 context.Context, arg1 *sum.SumRequest) (*sum.ResultReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeSum", arg0, arg1)
	ret0, _ := ret[0].(*sum.ResultReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeSum indicates an expected call of ComputeSum
func (mr *MockSumComputerServerMockRecorder) ComputeSum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeSum", reflect.TypeOf((*MockSumComputerServer)(nil).ComputeSum), arg0, arg1)
}
