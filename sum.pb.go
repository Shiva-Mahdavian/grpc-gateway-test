// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sum.proto

package sum

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SumRequest struct {
	FirstOperand         int32    `protobuf:"varint,1,opt,name=firstOperand,proto3" json:"firstOperand,omitempty"`
	SecondOperand        int32    `protobuf:"varint,2,opt,name=secondOperand,proto3" json:"secondOperand,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumRequest) Reset()         { *m = SumRequest{} }
func (m *SumRequest) String() string { return proto.CompactTextString(m) }
func (*SumRequest) ProtoMessage()    {}
func (*SumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62743f9cdc99b9fd, []int{0}
}

func (m *SumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumRequest.Unmarshal(m, b)
}
func (m *SumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumRequest.Marshal(b, m, deterministic)
}
func (m *SumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest.Merge(m, src)
}
func (m *SumRequest) XXX_Size() int {
	return xxx_messageInfo_SumRequest.Size(m)
}
func (m *SumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest proto.InternalMessageInfo

func (m *SumRequest) GetFirstOperand() int32 {
	if m != nil {
		return m.FirstOperand
	}
	return 0
}

func (m *SumRequest) GetSecondOperand() int32 {
	if m != nil {
		return m.SecondOperand
	}
	return 0
}

type ResultReply struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultReply) Reset()         { *m = ResultReply{} }
func (m *ResultReply) String() string { return proto.CompactTextString(m) }
func (*ResultReply) ProtoMessage()    {}
func (*ResultReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_62743f9cdc99b9fd, []int{1}
}

func (m *ResultReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultReply.Unmarshal(m, b)
}
func (m *ResultReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultReply.Marshal(b, m, deterministic)
}
func (m *ResultReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultReply.Merge(m, src)
}
func (m *ResultReply) XXX_Size() int {
	return xxx_messageInfo_ResultReply.Size(m)
}
func (m *ResultReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResultReply proto.InternalMessageInfo

func (m *ResultReply) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*SumRequest)(nil), "SumRequest")
	proto.RegisterType((*ResultReply)(nil), "ResultReply")
}

func init() { proto.RegisterFile("sum.proto", fileDescriptor_62743f9cdc99b9fd) }

var fileDescriptor_62743f9cdc99b9fd = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0xcd, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x0a, 0xe3, 0xe2, 0x0a, 0x2e, 0xcd, 0x0d, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x11, 0x52, 0xe2, 0xe2, 0x49, 0xcb, 0x2c, 0x2a, 0x2e, 0xf1, 0x2f, 0x48, 0x2d,
	0x4a, 0xcc, 0x4b, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x42, 0x11, 0x13, 0x52, 0xe1, 0xe2,
	0x2d, 0x4e, 0x4d, 0xce, 0xcf, 0x4b, 0x81, 0x29, 0x62, 0x02, 0x2b, 0x42, 0x15, 0x54, 0x52, 0xe5,
	0xe2, 0x0e, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x09, 0x4a, 0x2d, 0xc8, 0xa9, 0x14, 0x12, 0xe3, 0x62,
	0x2b, 0x02, 0x73, 0xa1, 0x46, 0x42, 0x79, 0x46, 0xe6, 0x5c, 0x5c, 0xce, 0xf9, 0xb9, 0x05, 0xa5,
	0x25, 0xa9, 0xc1, 0xa5, 0xb9, 0x42, 0x9a, 0x28, 0x3c, 0x6e, 0x3d, 0x84, 0xcb, 0xa4, 0x78, 0xf4,
	0x90, 0x8c, 0x53, 0x62, 0x48, 0x62, 0x03, 0x3b, 0xdf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xb3,
	0xa8, 0xeb, 0x2a, 0xcb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComputeSumClient is the client API for ComputeSum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComputeSumClient interface {
	ComputeSum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*ResultReply, error)
}

type computeSumClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeSumClient(cc grpc.ClientConnInterface) ComputeSumClient {
	return &computeSumClient{cc}
}

func (c *computeSumClient) ComputeSum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/ComputeSum/ComputeSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeSumServer is the server API for ComputeSum service.
type ComputeSumServer interface {
	ComputeSum(context.Context, *SumRequest) (*ResultReply, error)
}

// UnimplementedComputeSumServer can be embedded to have forward compatible implementations.
type UnimplementedComputeSumServer struct {
}

func (*UnimplementedComputeSumServer) ComputeSum(ctx context.Context, req *SumRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeSum not implemented")
}

func RegisterComputeSumServer(s *grpc.Server, srv ComputeSumServer) {
	s.RegisterService(&_ComputeSum_serviceDesc, srv)
}

func _ComputeSum_ComputeSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeSumServer).ComputeSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ComputeSum/ComputeSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeSumServer).ComputeSum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComputeSum_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ComputeSum",
	HandlerType: (*ComputeSumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeSum",
			Handler:    _ComputeSum_ComputeSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sum.proto",
}
